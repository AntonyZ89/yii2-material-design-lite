<?php


namespace antonyz89\mdl;

use antonyz89\pagesize\PageSize;
use antonyz89\mdl\widgets\LinkPager;
use kartik\grid\GridView as GridViewBase;
use yii\base\InvalidConfigException;
use yii\grid\GridView as GridViewYiiBase;
use yii\helpers\ArrayHelper;
use yii\widgets\Pjax;

class GridView extends GridViewBase
{
    public $containerOptions = ['class' => 'mdl-card__supporting-text no-padding table-responsive'];
    public $tableOptions = ['class' => 'mdl-data-table mdl-js-data-table'];
    public $resizableColumns = false;

    public $export = false;

    public $dataColumnClass = DataColumn::class;

    /******/

    public $panelFooterTemplate = '{footer}<div class="clearfix"></div>';
    public $filterSelector = '#pagesize';

    public $selectable = false; // TODO add `mdl-data-table--selectable` to [[ containerOptions['class'] ]]
    public $drawer;
    public $loader = '<div class="mdl-spinner mdl-js-spinner mdl-spinner__left is-active"></div>';

    /******/

    protected function initBootstrapStyle()
    {
        return null;
    }

    /**
     * @inheritdoc
     * @throws InvalidConfigException
     */
    public function renderTableBody()
    {
        $content = GridViewYiiBase::renderTableBody();

        if ($this->showPageSummary) {
            $summary = $this->renderPageSummary();
            return $this->pageSummaryPosition === self::POS_TOP ? ($summary . $content) : ($content . $summary);
        }
        return $content;
    }

    /**
     * @inheritDoc
     * @throws InvalidConfigException
     */
    protected function initPanel()
    {
        $this->panel['heading'] = ArrayHelper::getValue($this->panel, 'heading', false);
        $this->panel['before'] = ArrayHelper::getValue($this->panel, 'before', false);
        $this->panel['after'] = ArrayHelper::getValue($this->panel, 'after', false);

        $pageSize = PageSize::widget([
            'options' => [
                'id' => str_replace('#', '', $this->filterSelector)
            ]
        ]);

        $defaultFooter = "
<div class='mdl-paging'>
    <div class='mdl-paging__per-page'>
        <span class='mdl-paging__per-page-label'>Resultados por p√°gina</span> <!-- TODO use i18n -->
        $pageSize
    </div>
    <span class='mdl-paging__count'>{summary}</span>
    {pager}
</div>";

        $this->panel['footer'] = ArrayHelper::getValue($this->panel, 'footer') ?? $defaultFooter;

        if (isset($this->panel['options'])) {
            if (isset($this->panel['options']['class'])) {
                $this->panel['options']['class'] .= ' ui-tables';
            } else {
                $this->panel['options']['class'] = 'ui-tables';
            }
        } else {
            $this->panel['options'] = ['class' => 'ui-tables'];
        }

        parent::initPanel();
    }

    protected function renderToolbar()
    {
        if ($this->drawer !== null) {
            $this->toolbar[] = [
                'content' => Html::tag(
                    'div',
                    Html::tag('i', 'filter_list', ['class' => 'material-icons']),
                    [
                        'aria-expanded' => 'false',
                        'role' => 'button',
                        'tabindex' => 0,
                        'class' => Html::BUTTON_CLASS.' ' . Html::BUTTON_COLORS['white'] . ' mdl-layout__drawer-button' ,
                        'title' => 'Filtro',
                        'data-target' => $this->drawer,
                        'style' => [
                            'height' => '36px',
                            'line-height' => '36px',
                            'margin' => '0',
                            'font-size' => '14px'
                        ]
                    ]
                ),
            ];
        }


        return parent::renderToolbar(); // TODO: Change the autogenerated stub
    }

    public function renderPager()
    {
        $pagination = $this->dataProvider->getPagination();
        if ($pagination === false || $this->dataProvider->getCount() <= 0) {
            return '';
        }
        /* @var $class LinkPager */
        $pager = $this->pager;

        $class = ArrayHelper::remove($pager, 'class', LinkPager::className());
        $pager['pagination'] = $pagination;
        $pager['view'] = $this->getView();

        return $class::widget($pager);
    }

    protected function beginPjax()
    {
        $view = $this->getView();
        $container = 'jQuery("#' . $this->pjaxSettings['options']['id'] . '")';
        $js = $container;
        if (ArrayHelper::getValue($this->pjaxSettings, 'neverTimeout', true)) {
            $js .= ".on('pjax:timeout', function(e){e.preventDefault()})";
        }
        $loadingCss = ArrayHelper::getValue($this->pjaxSettings, 'loadingCssClass', 'kv-grid-loading');
        $postPjaxJs = "setTimeout({$this->_gridClientFunc}, 2500);";
        $pjaxCont = '$("#' . $this->pjaxSettings['options']['id'] . '")';
        if ($loadingCss !== false) {
            if ($loadingCss === true) {
                $loadingCss = 'kv-grid-loading';
            }
            $js .= ".on('pjax:send', function(){{$pjaxCont}.addClass('{$loadingCss}')})";
            $postPjaxJs .= "{$pjaxCont}.removeClass('{$loadingCss}');";
        }
        $postPjaxJs .= "\n" . $this->_toggleScript;
        if (!empty($postPjaxJs)) {
            $event = 'pjax:complete.' . hash('crc32', $postPjaxJs);
            $js .= ".off('{$event}').on('{$event}', function(){{$postPjaxJs}})";
        }
        if ($js != $container) {
            $view->registerJs("{$js};");
        }
        Pjax::begin($this->pjaxSettings['options']);
//        echo '<div class="kv-loader-overlay"><div class="kv-loader"></div></div>';
        echo "<div class='kv-loader-overlay'>$this->loader</div>";
        echo ArrayHelper::getValue($this->pjaxSettings, 'beforeGrid', '');
    }
}
